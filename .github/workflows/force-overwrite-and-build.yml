name: Force Overwrite Cloudreve and Build Android Binaries

on:
  schedule:
    - cron: '0 0 * * *' # 每天 UTC 00:00（北京时间 08:00）
  workflow_dispatch:
    inputs:
      force_build:
        description: 'Force build even if no new version (true/false)'
        required: false
        default: 'false'

jobs:
  overwrite-and-build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write
      packages: write
      issues: write
      pull-requests: write

    steps:
      # 检出当前仓库
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # 检查上游版本和 Release
      - name: Check Upstream Version and Release
        id: check_version
        run: |
          UPSTREAM_VERSION=$(curl -fs -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/cloudreve/Cloudreve/releases/latest | jq -r '.tag_name')
          echo "Upstream version: $UPSTREAM_VERSION"
          if [ -f ".version" ]; then
            CURRENT_VERSION=$(cat .version | tr -d '\n')
          else
            CURRENT_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "none")
          fi
          echo "Current version: $CURRENT_VERSION"
          FORCE_BUILD=${{ github.event.inputs.force_build || 'false' }}
          echo "Manual force build: $FORCE_BUILD"
          RELEASE_EXISTS=$(curl -fs -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/$UPSTREAM_VERSION | jq -r '.id // "none"')
          if [ "$RELEASE_EXISTS" != "none" ]; then
            echo "Release for $UPSTREAM_VERSION exists, checking assets..."
            ARM_ASSET=$(curl -fs -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/$UPSTREAM_VERSION | jq -r '.assets[] | select(.name == "cloudreve-android-arm") | .id // "none"')
            ARM64_ASSET=$(curl -fs -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/repos/${{ github.repository }}/releases/tags/$UPSTREAM_VERSION | jq -r '.assets[] | select(.name == "cloudreve-android-arm64") | .id // "none"')
            if [ "$ARM_ASSET" != "none" ] && [ "$ARM64_ASSET" != "none" ]; then
              echo "Release $UPSTREAM_VERSION has both artifacts"
              RELEASE_HAS_ARTIFACTS=true
            else
              echo "Release $UPSTREAM_VERSION missing artifacts, forcing build..."
              FORCE_BUILD=true
            fi
          else
            echo "No Release for $UPSTREAM_VERSION, forcing build..."
            FORCE_BUILD=true
          fi
          if [ "$FORCE_BUILD" = "true" ] || [ "$UPSTREAM_VERSION" != "$CURRENT_VERSION" ]; then
            echo "Proceeding with overwrite and build (force=$FORCE_BUILD, new_version=$UPSTREAM_VERSION != $CURRENT_VERSION)"
            echo "new_version=true" >> $GITHUB_OUTPUT
            echo "upstream_version=$UPSTREAM_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No new version and Release exists with artifacts. Exiting."
            echo "new_version=false" >> $GITHUB_OUTPUT
            exit 0
          fi

      # 强制覆盖仓库并更新 go.mod
      - name: Force Overwrite with Cloudreve Repository
        if: steps.check_version.outputs.new_version == 'true'
        run: |
          find . -maxdepth 1 -not -path './.git' -not -path './.github' -not -path '.' -not -path '..' -exec rm -rf {} +
          echo "Directory contents after cleanup:"
          ls -la
          git clone --depth 1 https://github.com/cloudreve/Cloudreve.git /tmp/cloudreve
          echo "Temporary directory contents:"
          ls -la /tmp/cloudreve
          rsync -a --exclude='.git' --exclude='.github' /tmp/cloudreve/ .
          rm -rf /tmp/cloudreve
          echo "${{ steps.check_version.outputs.upstream_version }}" > .version
          # 修复 go.mod 版本声明
          if [ -f "go.mod" ]; then
            sed -i 's/go 1.23.0/go 1.23/' go.mod
            echo "Updated go.mod:"
            cat go.mod
          fi
          # 更新 go.mod 和 go.sum
          go mod tidy
          echo "After go mod tidy:"
          cat go.mod
          cat go.sum || echo "No go.sum found"
          echo "Directory contents after rsync:"
          ls -la
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "Force overwrite with Cloudreve ${{ steps.check_version.outputs.upstream_version }} and update go.mod"
          else
            echo "No changes to commit, proceeding..."
          fi
          git push --force https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }} main
          echo "Checking for package.json:"
          find . -name "package.json" -type f || echo "No package.json found"

      # 设置 Go 环境
      - name: Set up Go
        if: steps.check_version.outputs.new_version == 'true'
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      # 验证 Go 版本和环境
      - name: Verify Go Version
        if: steps.check_version.outputs.new_version == 'true'
        run: |
          go version
          go env
          go mod download
          echo "Go modules downloaded"

      # 设置 Node.js 环境
      - name: Set up Node.js
        if: steps.check_version.outputs.new_version == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 设置 Android NDK
      - name: Set up Android NDK
        if: steps.check_version.outputs.new_version == 'true'
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25b

      # 安装依赖
      - name: Install Dependencies
        if: steps.check_version.outputs.new_version == 'true'
        run: |
          sudo apt-get update
          sudo apt-get install -y zip
          npm install -g yarn
          go install github.com/rakyll/statik@latest

      # 构建前端资源
      - name: Build Frontend Assets
        if: steps.check_version.outputs.new_version == 'true'
        run: |
          FRONTEND_DIR=$(find . \( -path ./frontend -o -path ./assets -o -path ./web \) -maxdepth 2 -name "package.json" -type f -exec dirname {} \; | head -n 1 || true)
          echo "Frontend dir: $FRONTEND_DIR"
          if [ -z "$FRONTEND_DIR" ]; then
            echo "No package.json found, checking for pre-built assets..."
            if [ -d "assets/build" ]; then
              echo "Found pre-built assets in assets/build"
              cd assets/build
              find . -name "*.map" -type f -delete
              cd ../../
              zip -r - assets/build > assets.zip
            else
              echo "No pre-built assets, cloning cloudreve/frontend..."
              git clone --depth 1 --branch release/${{ steps.check_version.outputs.upstream_version }} https://github.com/cloudreve/frontend.git /tmp/frontend || git clone --depth 1 https://github.com/cloudreve/frontend.git /tmp/frontend
              if [ -f "/tmp/frontend/package.json" ]; then
                echo "Found package.json in cloudreve/frontend"
                mv /tmp/frontend frontend
                cd frontend
                rm -f package-lock.json
                yarn install
                yarn run build
                mkdir -p ../assets/build
                cp -r build/* ../assets/build/
                cd ../assets/build
                find . -name "*.map" -type f -delete
                cd ../../
                zip -r - assets/build > assets.zip
              else
                echo "Error: No package.json or pre-built assets found"
                exit 1
              fi
            fi
          else
            echo "Found package.json in $FRONTEND_DIR"
            cd "$FRONTEND_DIR"
            rm -f package-lock.json
            yarn install
            yarn run build
            mkdir -p ../assets/build
            cp -r build/* ../assets/build/
            cd ../assets/build
            find . -name "*.map" -type f -delete
            cd ../../
            zip -r - assets/build > assets.zip
          fi

      # 嵌入静态资源
      - name: Embed Static Assets
        if: steps.check_version.outputs.new_version == 'true'
        run: |
          if [ -d "assets/build" ]; then
            statik -src=assets/build/ -include=*.html,*.js,*.json,*.css,*.png,*.svg,*.ico -f
          else
            echo "Error: assets/build directory not found"
            exit 1
          fi

      # 编译安卓二进制
      - name: Build Android Binaries
        if: steps.check_version.outputs.new_version == 'true'
        run: |
          COMMIT_SHA=$(git rev-parse --short HEAD)
          VERSION=${{ steps.check_version.outputs.upstream_version }}
          echo "Building with Go version: $(go version)"
          echo "NDK path: $ANDROID_NDK_HOME"
          GOOS=android GOARCH=arm64 CGO_ENABLED=1 \
          CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/aarch64-linux-android21-clang \
          go build -a -o cloudreve-android-arm64 -ldflags "-X 'github.com/cloudreve/Cloudreve/v3/pkg/conf.BackendVersion=$VERSION' -X 'github.com/cloudreve/Cloudreve/v3/pkg/conf.LastCommit=$COMMIT_SHA'"
          GOOS=android GOARCH=arm CGO_ENABLED=1 \
          CC=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/armv7a-linux-androideabi21-clang \
          GOARM=7 \
          go build -a -o cloudreve-android-arm -ldflags "-X 'github.com/cloudreve/Cloudreve/v3/pkg/conf.BackendVersion=$VERSION' -X 'github.com/cloudreve/Cloudreve/v3/pkg/conf.LastCommit=$COMMIT_SHA'"

      # 上传产物
      - name: Upload Android Binaries
        if: steps.check_version.outputs.new_version == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: cloudreve-android-binaries
          path: |
            cloudreve-android-arm64
            cloudreve-android-arm
          retention-days: 7

      # 创建 Release
      - name: Create GitHub Release
        if: steps.check_version.outputs.new_version == 'true'
        uses: actions/upload-release-asset@v1
        with:
          tag_name: ${{ steps.check_version.outputs.upstream_version }}
          name: Cloudreve ${{ steps.check_version.outputs.upstream_version }} for Android
          body: |
            Automatically built Android binaries for Cloudreve ${{ steps.check_version.outputs.upstream_version }}.
            - 32-bit (ARM): cloudreve-android-arm
            - 64-bit (ARM64): cloudreve-android-arm64
          files: |
            cloudreve-android-arm64
            cloudreve-android-arm
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}